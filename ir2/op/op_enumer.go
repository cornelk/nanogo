// Code generated by "enumer -type=Op -transform title-lower"; DO NOT EDIT.

package op

import (
	"fmt"
	"strings"
)

const _OpName = "invalidbuiltincallcallBuiltinchangeInterfacechangeTypeconstconvertcopyextractfieldfieldAddrfreeVarfuncglobalindexindexAddrinlineAsmlocallookupmakeInterfacemakeSlicenextnewparameterrangeregslicesliceToArrayPointerstoreswapInswapOuttypeAssertaddsubmuldivremandorxorshiftLeftshiftRightandNotequalnotEquallesslessEqualgreatergreaterEqualnotnegateloadinvertjumpifreturnpanicifEqualifNotEqualifLessifLessEqualifGreaterifGreaterEqualnumOps"

var _OpIndex = [...]uint16{0, 7, 14, 18, 29, 44, 54, 59, 66, 70, 77, 82, 91, 98, 102, 108, 113, 122, 131, 136, 142, 155, 164, 168, 171, 180, 185, 188, 193, 212, 217, 223, 230, 240, 243, 246, 249, 252, 255, 258, 260, 263, 272, 282, 288, 293, 301, 305, 314, 321, 333, 336, 342, 346, 352, 356, 358, 364, 369, 376, 386, 392, 403, 412, 426, 432}

const _OpLowerName = "invalidbuiltincallcallbuiltinchangeinterfacechangetypeconstconvertcopyextractfieldfieldaddrfreevarfuncglobalindexindexaddrinlineasmlocallookupmakeinterfacemakeslicenextnewparameterrangeregsliceslicetoarraypointerstoreswapinswapouttypeassertaddsubmuldivremandorxorshiftleftshiftrightandnotequalnotequallesslessequalgreatergreaterequalnotnegateloadinvertjumpifreturnpanicifequalifnotequaliflessiflessequalifgreaterifgreaterequalnumops"

func (i Op) String() string {
	if i >= Op(len(_OpIndex)-1) {
		return fmt.Sprintf("Op(%d)", i)
	}
	return _OpName[_OpIndex[i]:_OpIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _OpNoOp() {
	var x [1]struct{}
	_ = x[Invalid-(0)]
	_ = x[Builtin-(1)]
	_ = x[Call-(2)]
	_ = x[CallBuiltin-(3)]
	_ = x[ChangeInterface-(4)]
	_ = x[ChangeType-(5)]
	_ = x[Const-(6)]
	_ = x[Convert-(7)]
	_ = x[Copy-(8)]
	_ = x[Extract-(9)]
	_ = x[Field-(10)]
	_ = x[FieldAddr-(11)]
	_ = x[FreeVar-(12)]
	_ = x[Func-(13)]
	_ = x[Global-(14)]
	_ = x[Index-(15)]
	_ = x[IndexAddr-(16)]
	_ = x[InlineAsm-(17)]
	_ = x[Local-(18)]
	_ = x[Lookup-(19)]
	_ = x[MakeInterface-(20)]
	_ = x[MakeSlice-(21)]
	_ = x[Next-(22)]
	_ = x[New-(23)]
	_ = x[Parameter-(24)]
	_ = x[Range-(25)]
	_ = x[Reg-(26)]
	_ = x[Slice-(27)]
	_ = x[SliceToArrayPointer-(28)]
	_ = x[Store-(29)]
	_ = x[SwapIn-(30)]
	_ = x[SwapOut-(31)]
	_ = x[TypeAssert-(32)]
	_ = x[Add-(33)]
	_ = x[Sub-(34)]
	_ = x[Mul-(35)]
	_ = x[Div-(36)]
	_ = x[Rem-(37)]
	_ = x[And-(38)]
	_ = x[Or-(39)]
	_ = x[Xor-(40)]
	_ = x[ShiftLeft-(41)]
	_ = x[ShiftRight-(42)]
	_ = x[AndNot-(43)]
	_ = x[Equal-(44)]
	_ = x[NotEqual-(45)]
	_ = x[Less-(46)]
	_ = x[LessEqual-(47)]
	_ = x[Greater-(48)]
	_ = x[GreaterEqual-(49)]
	_ = x[Not-(50)]
	_ = x[Negate-(51)]
	_ = x[Load-(52)]
	_ = x[Invert-(53)]
	_ = x[Jump-(54)]
	_ = x[If-(55)]
	_ = x[Return-(56)]
	_ = x[Panic-(57)]
	_ = x[IfEqual-(58)]
	_ = x[IfNotEqual-(59)]
	_ = x[IfLess-(60)]
	_ = x[IfLessEqual-(61)]
	_ = x[IfGreater-(62)]
	_ = x[IfGreaterEqual-(63)]
	_ = x[NumOps-(64)]
}

var _OpValues = []Op{Invalid, Builtin, Call, CallBuiltin, ChangeInterface, ChangeType, Const, Convert, Copy, Extract, Field, FieldAddr, FreeVar, Func, Global, Index, IndexAddr, InlineAsm, Local, Lookup, MakeInterface, MakeSlice, Next, New, Parameter, Range, Reg, Slice, SliceToArrayPointer, Store, SwapIn, SwapOut, TypeAssert, Add, Sub, Mul, Div, Rem, And, Or, Xor, ShiftLeft, ShiftRight, AndNot, Equal, NotEqual, Less, LessEqual, Greater, GreaterEqual, Not, Negate, Load, Invert, Jump, If, Return, Panic, IfEqual, IfNotEqual, IfLess, IfLessEqual, IfGreater, IfGreaterEqual, NumOps}

var _OpNameToValueMap = map[string]Op{
	_OpName[0:7]:          Invalid,
	_OpLowerName[0:7]:     Invalid,
	_OpName[7:14]:         Builtin,
	_OpLowerName[7:14]:    Builtin,
	_OpName[14:18]:        Call,
	_OpLowerName[14:18]:   Call,
	_OpName[18:29]:        CallBuiltin,
	_OpLowerName[18:29]:   CallBuiltin,
	_OpName[29:44]:        ChangeInterface,
	_OpLowerName[29:44]:   ChangeInterface,
	_OpName[44:54]:        ChangeType,
	_OpLowerName[44:54]:   ChangeType,
	_OpName[54:59]:        Const,
	_OpLowerName[54:59]:   Const,
	_OpName[59:66]:        Convert,
	_OpLowerName[59:66]:   Convert,
	_OpName[66:70]:        Copy,
	_OpLowerName[66:70]:   Copy,
	_OpName[70:77]:        Extract,
	_OpLowerName[70:77]:   Extract,
	_OpName[77:82]:        Field,
	_OpLowerName[77:82]:   Field,
	_OpName[82:91]:        FieldAddr,
	_OpLowerName[82:91]:   FieldAddr,
	_OpName[91:98]:        FreeVar,
	_OpLowerName[91:98]:   FreeVar,
	_OpName[98:102]:       Func,
	_OpLowerName[98:102]:  Func,
	_OpName[102:108]:      Global,
	_OpLowerName[102:108]: Global,
	_OpName[108:113]:      Index,
	_OpLowerName[108:113]: Index,
	_OpName[113:122]:      IndexAddr,
	_OpLowerName[113:122]: IndexAddr,
	_OpName[122:131]:      InlineAsm,
	_OpLowerName[122:131]: InlineAsm,
	_OpName[131:136]:      Local,
	_OpLowerName[131:136]: Local,
	_OpName[136:142]:      Lookup,
	_OpLowerName[136:142]: Lookup,
	_OpName[142:155]:      MakeInterface,
	_OpLowerName[142:155]: MakeInterface,
	_OpName[155:164]:      MakeSlice,
	_OpLowerName[155:164]: MakeSlice,
	_OpName[164:168]:      Next,
	_OpLowerName[164:168]: Next,
	_OpName[168:171]:      New,
	_OpLowerName[168:171]: New,
	_OpName[171:180]:      Parameter,
	_OpLowerName[171:180]: Parameter,
	_OpName[180:185]:      Range,
	_OpLowerName[180:185]: Range,
	_OpName[185:188]:      Reg,
	_OpLowerName[185:188]: Reg,
	_OpName[188:193]:      Slice,
	_OpLowerName[188:193]: Slice,
	_OpName[193:212]:      SliceToArrayPointer,
	_OpLowerName[193:212]: SliceToArrayPointer,
	_OpName[212:217]:      Store,
	_OpLowerName[212:217]: Store,
	_OpName[217:223]:      SwapIn,
	_OpLowerName[217:223]: SwapIn,
	_OpName[223:230]:      SwapOut,
	_OpLowerName[223:230]: SwapOut,
	_OpName[230:240]:      TypeAssert,
	_OpLowerName[230:240]: TypeAssert,
	_OpName[240:243]:      Add,
	_OpLowerName[240:243]: Add,
	_OpName[243:246]:      Sub,
	_OpLowerName[243:246]: Sub,
	_OpName[246:249]:      Mul,
	_OpLowerName[246:249]: Mul,
	_OpName[249:252]:      Div,
	_OpLowerName[249:252]: Div,
	_OpName[252:255]:      Rem,
	_OpLowerName[252:255]: Rem,
	_OpName[255:258]:      And,
	_OpLowerName[255:258]: And,
	_OpName[258:260]:      Or,
	_OpLowerName[258:260]: Or,
	_OpName[260:263]:      Xor,
	_OpLowerName[260:263]: Xor,
	_OpName[263:272]:      ShiftLeft,
	_OpLowerName[263:272]: ShiftLeft,
	_OpName[272:282]:      ShiftRight,
	_OpLowerName[272:282]: ShiftRight,
	_OpName[282:288]:      AndNot,
	_OpLowerName[282:288]: AndNot,
	_OpName[288:293]:      Equal,
	_OpLowerName[288:293]: Equal,
	_OpName[293:301]:      NotEqual,
	_OpLowerName[293:301]: NotEqual,
	_OpName[301:305]:      Less,
	_OpLowerName[301:305]: Less,
	_OpName[305:314]:      LessEqual,
	_OpLowerName[305:314]: LessEqual,
	_OpName[314:321]:      Greater,
	_OpLowerName[314:321]: Greater,
	_OpName[321:333]:      GreaterEqual,
	_OpLowerName[321:333]: GreaterEqual,
	_OpName[333:336]:      Not,
	_OpLowerName[333:336]: Not,
	_OpName[336:342]:      Negate,
	_OpLowerName[336:342]: Negate,
	_OpName[342:346]:      Load,
	_OpLowerName[342:346]: Load,
	_OpName[346:352]:      Invert,
	_OpLowerName[346:352]: Invert,
	_OpName[352:356]:      Jump,
	_OpLowerName[352:356]: Jump,
	_OpName[356:358]:      If,
	_OpLowerName[356:358]: If,
	_OpName[358:364]:      Return,
	_OpLowerName[358:364]: Return,
	_OpName[364:369]:      Panic,
	_OpLowerName[364:369]: Panic,
	_OpName[369:376]:      IfEqual,
	_OpLowerName[369:376]: IfEqual,
	_OpName[376:386]:      IfNotEqual,
	_OpLowerName[376:386]: IfNotEqual,
	_OpName[386:392]:      IfLess,
	_OpLowerName[386:392]: IfLess,
	_OpName[392:403]:      IfLessEqual,
	_OpLowerName[392:403]: IfLessEqual,
	_OpName[403:412]:      IfGreater,
	_OpLowerName[403:412]: IfGreater,
	_OpName[412:426]:      IfGreaterEqual,
	_OpLowerName[412:426]: IfGreaterEqual,
	_OpName[426:432]:      NumOps,
	_OpLowerName[426:432]: NumOps,
}

var _OpNames = []string{
	_OpName[0:7],
	_OpName[7:14],
	_OpName[14:18],
	_OpName[18:29],
	_OpName[29:44],
	_OpName[44:54],
	_OpName[54:59],
	_OpName[59:66],
	_OpName[66:70],
	_OpName[70:77],
	_OpName[77:82],
	_OpName[82:91],
	_OpName[91:98],
	_OpName[98:102],
	_OpName[102:108],
	_OpName[108:113],
	_OpName[113:122],
	_OpName[122:131],
	_OpName[131:136],
	_OpName[136:142],
	_OpName[142:155],
	_OpName[155:164],
	_OpName[164:168],
	_OpName[168:171],
	_OpName[171:180],
	_OpName[180:185],
	_OpName[185:188],
	_OpName[188:193],
	_OpName[193:212],
	_OpName[212:217],
	_OpName[217:223],
	_OpName[223:230],
	_OpName[230:240],
	_OpName[240:243],
	_OpName[243:246],
	_OpName[246:249],
	_OpName[249:252],
	_OpName[252:255],
	_OpName[255:258],
	_OpName[258:260],
	_OpName[260:263],
	_OpName[263:272],
	_OpName[272:282],
	_OpName[282:288],
	_OpName[288:293],
	_OpName[293:301],
	_OpName[301:305],
	_OpName[305:314],
	_OpName[314:321],
	_OpName[321:333],
	_OpName[333:336],
	_OpName[336:342],
	_OpName[342:346],
	_OpName[346:352],
	_OpName[352:356],
	_OpName[356:358],
	_OpName[358:364],
	_OpName[364:369],
	_OpName[369:376],
	_OpName[376:386],
	_OpName[386:392],
	_OpName[392:403],
	_OpName[403:412],
	_OpName[412:426],
	_OpName[426:432],
}

// OpString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OpString(s string) (Op, error) {
	if val, ok := _OpNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _OpNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Op values", s)
}

// OpValues returns all values of the enum
func OpValues() []Op {
	return _OpValues
}

// OpStrings returns a slice of all String values of the enum
func OpStrings() []string {
	strs := make([]string, len(_OpNames))
	copy(strs, _OpNames)
	return strs
}

// IsAOp returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Op) IsAOp() bool {
	for _, v := range _OpValues {
		if i == v {
			return true
		}
	}
	return false
}
